{"ast":null,"code":"// import React, { useState, useEffect, useContext } from \"react\";\n// import { searchItems, addItemToOrder, addToFavorite } from \"../services/api\";\n// import classes from \"./SearchBar.module.css\";\n// import { faHeart, faShoppingCart } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import AuthContext from \"./context/AuthProvider\";\n\n// const SearchBar = () => {\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [noResultsMessage, setNoResultsMessage] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const { isLoggedIn, auth } = useContext(AuthContext);\n//   const userName = auth.user && auth.user.sub;\n\n//   useEffect(() => {\n//     if (searchTerm) {\n//       searchItems(searchTerm)\n//         .then((response) => {\n//           if (response.data.length === 0) {\n//             setNoResultsMessage(\"No items found.\");\n//           } else {\n//             setSearchResults(response.data);\n//             setNoResultsMessage(\"\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error searching items:\", error);\n//           setNoResultsMessage(\"Failed to fetch items\");\n//         });\n//     } else {\n//       setSearchResults([]);\n//       setNoResultsMessage(\"\");\n//     }\n//   }, [searchTerm]);\n\n//   const handleAddToFavorite = async (itemId) => {\n//     if (!isLoggedIn) {\n//       setMessage(\"User is not logged in\");\n//       setTimeout(() => setMessage(\"\"), 3000);\n//       return;\n//     }\n\n//     try {\n//       const itemToAdd = searchResults.find((item) => item.id === itemId);\n//       if (!itemToAdd) {\n//         setMessage(\"Item not found\");\n//         setTimeout(() => setMessage(\"\"), 3000);\n//         return;\n//       }\n\n//       const favoriteItem = {\n//         userName,\n//         itemId: itemToAdd.id,\n//         item: {\n//           id: itemToAdd.id,\n//           name: itemToAdd.name,\n//           photo: itemToAdd.photo,\n//           price: itemToAdd.price,\n//           stock: itemToAdd.stock,\n//         },\n//       };\n\n//       await addToFavorite(favoriteItem);\n//       setMessage(`${itemToAdd.name} added to favorites!`);\n//       setTimeout(() => setMessage(\"\"), 3000);\n//     } catch (error) {\n//       console.error(\"Error handling favorite:\", error);\n//       setMessage(\"Failed to add item to favorites.\");\n//       setTimeout(() => setMessage(\"\"), 3000);\n//     }\n//   };\n\n//   const handleAddToOrder = async (item) => {\n//     if (!isLoggedIn) {\n//       setMessage(\"User is not logged in\");\n//       setTimeout(() => setMessage(\"\"), 3000);\n//       return;\n//     }\n\n//     try {\n//       const itemData = {\n//         id: item.id,\n//         name: item.name,\n//         photo: item.photo,\n//         price: item.price,\n//         stock: item.stock,\n//       };\n\n//       await addItemToOrder(auth.user.sub, itemData);\n//       setMessage(`${item.name} added to order successfully.`);\n//       setTimeout(() => setMessage(\"\"), 3000);\n//     } catch (error) {\n//       console.error(\"Error adding item to order:\", error);\n//       setMessage(\"Failed to add item to order.\");\n//       setTimeout(() => setMessage(\"\"), 3000);\n//     }\n//   };\n\n//   return (\n//     <div className={classes.search}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search Items...\"\n//         value={searchTerm}\n//         onChange={(e) => setSearchTerm(e.target.value)}\n//       />\n//       {searchResults.length > 0 && (\n//         <ul className={classes.searchResults}>\n//           {searchResults.map((item) => (\n//             <li key={item.id}>\n//               {isLoggedIn && (\n//                 <button\n//                   className={classes.button}\n//                   onClick={() => handleAddToFavorite(item.id)}\n//                 >\n//                   <FontAwesomeIcon icon={faHeart} />\n//                 </button>\n//               )}\n//               {isLoggedIn && (\n//                 <button\n//                   className={classes.button}\n//                   onClick={() => handleAddToOrder(item)}\n//                 >\n//                   <FontAwesomeIcon icon={faShoppingCart} />\n//                 </button>\n//               )}\n//               <div>\n//                 {\" \"}\n//                 {item.name}: ${item.price}\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//       {noResultsMessage && (\n//         <div\n//           className={`${classes.noResults} ${\n//             noResultsMessage ? classes.visible : \"\"\n//           }`}\n//         >\n//           {noResultsMessage}\n//         </div>\n//       )}\n//       {message && <p className={classes.message}>{message}</p>}\n//     </div>\n//   );\n// };\n\n// export default SearchBar;","map":{"version":3,"names":[],"sources":["C:/Users/Matan/Pictures/test-project/NfTsWebSiteStore-FE/src/components/SearchBar.js"],"sourcesContent":["// import React, { useState, useEffect, useContext } from \"react\";\r\n// import { searchItems, addItemToOrder, addToFavorite } from \"../services/api\";\r\n// import classes from \"./SearchBar.module.css\";\r\n// import { faHeart, faShoppingCart } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import AuthContext from \"./context/AuthProvider\";\r\n\r\n// const SearchBar = () => {\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [searchResults, setSearchResults] = useState([]);\r\n//   const [noResultsMessage, setNoResultsMessage] = useState(\"\");\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const { isLoggedIn, auth } = useContext(AuthContext);\r\n//   const userName = auth.user && auth.user.sub;\r\n\r\n//   useEffect(() => {\r\n//     if (searchTerm) {\r\n//       searchItems(searchTerm)\r\n//         .then((response) => {\r\n//           if (response.data.length === 0) {\r\n//             setNoResultsMessage(\"No items found.\");\r\n//           } else {\r\n//             setSearchResults(response.data);\r\n//             setNoResultsMessage(\"\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error searching items:\", error);\r\n//           setNoResultsMessage(\"Failed to fetch items\");\r\n//         });\r\n//     } else {\r\n//       setSearchResults([]);\r\n//       setNoResultsMessage(\"\");\r\n//     }\r\n//   }, [searchTerm]);\r\n\r\n//   const handleAddToFavorite = async (itemId) => {\r\n//     if (!isLoggedIn) {\r\n//       setMessage(\"User is not logged in\");\r\n//       setTimeout(() => setMessage(\"\"), 3000);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const itemToAdd = searchResults.find((item) => item.id === itemId);\r\n//       if (!itemToAdd) {\r\n//         setMessage(\"Item not found\");\r\n//         setTimeout(() => setMessage(\"\"), 3000);\r\n//         return;\r\n//       }\r\n\r\n//       const favoriteItem = {\r\n//         userName,\r\n//         itemId: itemToAdd.id,\r\n//         item: {\r\n//           id: itemToAdd.id,\r\n//           name: itemToAdd.name,\r\n//           photo: itemToAdd.photo,\r\n//           price: itemToAdd.price,\r\n//           stock: itemToAdd.stock,\r\n//         },\r\n//       };\r\n\r\n//       await addToFavorite(favoriteItem);\r\n//       setMessage(`${itemToAdd.name} added to favorites!`);\r\n//       setTimeout(() => setMessage(\"\"), 3000);\r\n//     } catch (error) {\r\n//       console.error(\"Error handling favorite:\", error);\r\n//       setMessage(\"Failed to add item to favorites.\");\r\n//       setTimeout(() => setMessage(\"\"), 3000);\r\n//     }\r\n//   };\r\n\r\n//   const handleAddToOrder = async (item) => {\r\n//     if (!isLoggedIn) {\r\n//       setMessage(\"User is not logged in\");\r\n//       setTimeout(() => setMessage(\"\"), 3000);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const itemData = {\r\n//         id: item.id,\r\n//         name: item.name,\r\n//         photo: item.photo,\r\n//         price: item.price,\r\n//         stock: item.stock,\r\n//       };\r\n\r\n//       await addItemToOrder(auth.user.sub, itemData);\r\n//       setMessage(`${item.name} added to order successfully.`);\r\n//       setTimeout(() => setMessage(\"\"), 3000);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding item to order:\", error);\r\n//       setMessage(\"Failed to add item to order.\");\r\n//       setTimeout(() => setMessage(\"\"), 3000);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.search}>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Search Items...\"\r\n//         value={searchTerm}\r\n//         onChange={(e) => setSearchTerm(e.target.value)}\r\n//       />\r\n//       {searchResults.length > 0 && (\r\n//         <ul className={classes.searchResults}>\r\n//           {searchResults.map((item) => (\r\n//             <li key={item.id}>\r\n//               {isLoggedIn && (\r\n//                 <button\r\n//                   className={classes.button}\r\n//                   onClick={() => handleAddToFavorite(item.id)}\r\n//                 >\r\n//                   <FontAwesomeIcon icon={faHeart} />\r\n//                 </button>\r\n//               )}\r\n//               {isLoggedIn && (\r\n//                 <button\r\n//                   className={classes.button}\r\n//                   onClick={() => handleAddToOrder(item)}\r\n//                 >\r\n//                   <FontAwesomeIcon icon={faShoppingCart} />\r\n//                 </button>\r\n//               )}\r\n//               <div>\r\n//                 {\" \"}\r\n//                 {item.name}: ${item.price}\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//       {noResultsMessage && (\r\n//         <div\r\n//           className={`${classes.noResults} ${\r\n//             noResultsMessage ? classes.visible : \"\"\r\n//           }`}\r\n//         >\r\n//           {noResultsMessage}\r\n//         </div>\r\n//       )}\r\n//       {message && <p className={classes.message}>{message}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SearchBar;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}